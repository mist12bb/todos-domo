{"version":3,"sources":["components/todos.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","id","react_default","a","createElement","className","concat","done","type","description","onClick","Todos","state","newTodo","todos","error","isLoading","this","fetchTodos","_this2","setState","fetch","then","res","json","catch","message","event","preventDefault","_this$state","_this3","_this$state2","total","length","complete","filter","incomplete","onSubmit","addTodo","bind","style","justifyContent","value","placeholder","onChange","e","target","disabled","map","todos_Todo","key","_id","Component","App","components_todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d50f382.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\n \r\n const Todo = ({ todo, id }) => (\r\n   <div className=\"box todo-item level is-mobile\">\r\n   <div className=\"level-left\">\r\n     <label className={`level-item todo-description ${todo.done && \"completed\"}`}>\r\n       <input className=\"checkbox\" type=\"checkbox\"/>\r\n       <span>{todo.description}</span>\r\n     </label>\r\n   </div>\r\n     <div className=\"level-right\">\r\n     <a className=\"delete level-item\" onClick={() => {}}>Delete</a>\r\n     </div>\r\n   </div>\r\n )\r\n \r\n class Todos extends Component {\r\n   state = {\r\n     newTodo: \"\",\r\n     todos: [],\r\n     error: \"\",\r\n     isLoading: false\r\n   }\r\n \r\n   componentDidMount() {\r\n     this.fetchTodos()\r\n   }\r\n \r\n   fetchTodos () {\r\n     this.setState({ isLoading: true })\r\n \r\n     // HTTP GET Request to our backend api and load into state\r\n     fetch(\"https://bubble-lungfish.glitch.me/v1/todos\")\r\n       .then((res) => res.json())\r\n       .then(todos => this.setState({ isLoading: false, todos }))\r\n       .catch((error) => this.setState({ error: error.message }))\r\n   }\r\n \r\n   addTodo (event) {\r\n     event.preventDefault() // Prevent form from reloading page\r\n     const { newTodo, todos } = this.state\r\n \r\n     if(newTodo) {\r\n       this.setState({\r\n         newTodo: \"\",\r\n         todos: todos.concat({ description: newTodo, done: false })\r\n       })\r\n     }\r\n   }\r\n \r\n render() {\r\n   let { todos, newTodo, isLoading, error } = this.state\r\n \r\n   const total = todos.length\r\n   const complete = todos.filter((todo) => todo.done).length\r\n   const incomplete = todos.filter((todo) => !todo.done).length\r\n \r\n   return (\r\n   <section className=\"section full-column\">\r\n   <h1 className=\"title white\">Todos</h1>\r\n   <div className=\"error\">{error}</div>\r\n \r\n   <form className=\"form\" onSubmit={this.addTodo.bind(this)}>\r\n      <div className=\"field has-addons\" style={{ justifyContent: \"center\" }}>\r\n      <div className=\"control\">\r\n      <input className=\"input\"\r\n         value={newTodo}\r\n         placeholder=\"New todo\"\r\n         onChange={(e) => this.setState({ newTodo: e.target.value })}/>\r\n      </div>\r\n \r\n      <div className=\"control\">\r\n       <button \r\n        className={`button is-success ${isLoading && \"is-loading\"}`}\r\n        disabled={isLoading}>Add</button>\r\n      </div>\r\n     </div>\r\n   </form>\r\n \r\n   <div className=\"container todo-list\">\r\n     {todos.map((todo) => <Todo key={todo._id} id={todo._id} todo={todo}/> )}\r\n     <div className=\"white\">\r\n       Total: {total} , Complete: {complete} , Incomplete: {incomplete}\r\n     </div>\r\n   </div>\r\n </section>\r\n );\r\n }\r\n }\r\n \r\n export default Todos","import React, { Component } from 'react';\nimport Todos from './components/todos';\n//import './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n      <Todos>\n      </Todos>\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}